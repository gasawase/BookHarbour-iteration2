//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Scripts/Functionality/UserInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace BookHarbour
{
    public partial class @UserInputActions: IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @UserInputActions()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""UserInputActions"",
    ""maps"": [
        {
            ""name"": ""User"",
            ""id"": ""d2bea131-095b-48ce-a1e0-abcb44e7e6f9"",
            ""actions"": [
                {
                    ""name"": ""Click/Press"",
                    ""type"": ""Button"",
                    ""id"": ""53c2236e-c59a-47ca-924b-1605fb295288"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Hold"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PointerPosition"",
                    ""type"": ""Value"",
                    ""id"": ""a1bd6ece-8373-4fe1-a891-23145222418d"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""f80b4518-8238-4414-a2da-c31d4feb3f11"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Click/Press"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d465a29a-0da7-4eea-9db2-914130c9680f"",
                    ""path"": ""<Touchscreen>/Press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Click/Press"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4f220d0d-da67-483d-8cbe-0ca4bf16d58f"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PointerPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f15ed4a9-64f1-4120-b82c-f28d743656f4"",
                    ""path"": ""<Touchscreen>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PointerPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // User
            m_User = asset.FindActionMap("User", throwIfNotFound: true);
            m_User_ClickPress = m_User.FindAction("Click/Press", throwIfNotFound: true);
            m_User_PointerPosition = m_User.FindAction("PointerPosition", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }

        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // User
        private readonly InputActionMap m_User;
        private List<IUserActions> m_UserActionsCallbackInterfaces = new List<IUserActions>();
        private readonly InputAction m_User_ClickPress;
        private readonly InputAction m_User_PointerPosition;
        public struct UserActions
        {
            private @UserInputActions m_Wrapper;
            public UserActions(@UserInputActions wrapper) { m_Wrapper = wrapper; }
            public InputAction @ClickPress => m_Wrapper.m_User_ClickPress;
            public InputAction @PointerPosition => m_Wrapper.m_User_PointerPosition;
            public InputActionMap Get() { return m_Wrapper.m_User; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(UserActions set) { return set.Get(); }
            public void AddCallbacks(IUserActions instance)
            {
                if (instance == null || m_Wrapper.m_UserActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_UserActionsCallbackInterfaces.Add(instance);
                @ClickPress.started += instance.OnClickPress;
                @ClickPress.performed += instance.OnClickPress;
                @ClickPress.canceled += instance.OnClickPress;
                @PointerPosition.started += instance.OnPointerPosition;
                @PointerPosition.performed += instance.OnPointerPosition;
                @PointerPosition.canceled += instance.OnPointerPosition;
            }

            private void UnregisterCallbacks(IUserActions instance)
            {
                @ClickPress.started -= instance.OnClickPress;
                @ClickPress.performed -= instance.OnClickPress;
                @ClickPress.canceled -= instance.OnClickPress;
                @PointerPosition.started -= instance.OnPointerPosition;
                @PointerPosition.performed -= instance.OnPointerPosition;
                @PointerPosition.canceled -= instance.OnPointerPosition;
            }

            public void RemoveCallbacks(IUserActions instance)
            {
                if (m_Wrapper.m_UserActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IUserActions instance)
            {
                foreach (var item in m_Wrapper.m_UserActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_UserActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public UserActions @User => new UserActions(this);
        public interface IUserActions
        {
            void OnClickPress(InputAction.CallbackContext context);
            void OnPointerPosition(InputAction.CallbackContext context);
        }
    }
}
